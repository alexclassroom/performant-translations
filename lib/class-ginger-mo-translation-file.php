<?php

class Ginger_MO_Translation_File {
	protected $headers = array();
	protected $parsed  = false;
	protected $error   = false;
	protected $file    = '';
	protected $entries = array(); // [ "Original" => "Translation" ]

	protected $plural_forms = '';

	protected function __construct( $file, $context = 'read' ) {
		$this->file = $file;

		if ( 'write' == $context ) {
			if ( file_exists( $file ) ) {
				$this->error = is_writable( $file ) ? false : 'File is not writable';
			} elseif ( ! is_writable( dirname( $file ) ) ) {
				$this->error = 'Directory not writable';
			}
		} elseif ( ! is_readable( $file ) ) {
			$this->error = 'File not readable';
		}
	}

	public static function create( $file, $context = 'read', $filetype = null ) {
		if ( ! $filetype ) {
			$filetype = substr( $file, strrpos( $file, '.' ) + 1 );
		}

		switch ( $filetype ) {
			case 'mo':
				$moe = new Ginger_MO_Translation_File_MO( $file, $context );
				break;
			case 'php':
				$moe = new Ginger_MO_Translation_File_PHP( $file, $context );
				break;
			case 'json':
				$moe = new Ginger_MO_Translation_File_JSON( $file, $context );
				break;
			default:
				$moe = false;
		}

		return $moe;
	}

	public function headers() {
		if ( ! $this->parsed ) {
			$this->parse_file();
		}
		return $this->headers;
	}

	public function entries() {
		if ( ! $this->parsed ) {
			$this->parse_file();
		}
		return $this->entries;
	}

	public function error() {
		return $this->error;
	}

	public function get_file() {
		return $this->file;
	}

	public function translate( $string ) {
		if ( ! $this->parsed ) {
			$this->parse_file();
		}

		return isset( $this->entries[ $string ] ) ? $this->entries[ $string ] : false;
	}

	public function get_plural_form( $number ) {
		if ( ! $this->parsed ) {
			$this->parse_file();
		}

		// In case a plural form is specified as a header, but no function included, build one.
		if ( ! $this->plural_forms && isset( $this->headers['plural-forms'] ) ) {
			$this->plural_forms = $this->make_plural_form_function( $this->headers['plural-forms'] );
		}

		if ( $this->plural_forms && is_callable( $this->plural_forms ) ) {
			return call_user_func( $this->plural_forms, $number );
		}

		// Default plural form matches English, only "One" is considered singular.
		return ( $number == 1 ? 0 : 1 );
	}

	public function export( Ginger_MO_Translation_File $destination ) {
		if ( $destination->error() ) {
			return false;
		}

		if ( ! $this->parsed ) {
			$this->parse_file();
		}

		$headers                = $this->headers;
		$headers['x-converter'] = 'Generated by Ginger-MO from ' . basename( $this->file ) . ' on ' . date( 'r' );

		$destination->create_file( $headers, $this->entries );
		$this->error = $destination->error();

		return ! $this->error;
	}

	public function make_plural_form_function( $expression ) {
		try {
			$handler = new Plural_Forms( rtrim( $expression, ';' ) );
			return array( $handler, 'get' );
		} catch ( Exception $e ) {
			// Fall back to default plural-form function.
			return $this->make_plural_form_function( 'n != 1' );
		}
	}

	protected function parse_file() {}
	protected function create_file( $headers, $entries ) {
		$this->error = 'Format not supported.';
		return false;
	}
}
